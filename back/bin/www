#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('back:server');
const http = require('http');
const server = http.createServer(app);
const io = require('socket.io').listen(server);
const port = normalizePort(process.env.PORT || '3000');
const Posts = require('../modules/post');
const User = require('../modules/users');
const Post = require('../modules/post');

app.set('port', port);

// socket io connect
// io.on("connection", (socket)=>{
//   console.log('connct')
//   // listin to emit
//   socket.on('join', function(data){
//     User.find({}, (err, users)=>{
//       if (err) {
//         console.log(err)
//       }else{
//         userFriends = [];
//         for (const user of users) {
//           if (user._id == data.userId) {
//             user.friends.forEach((id)=>{
//           //  socket.join(data.userId);   
//           io.broadcast.emit('new message', { username:data.username, body:data.username + 'have been add new post'})
 
//             })
//       }
//       }
//     }
//   })
// })
//   // listen to emit
//   // socket.on('leave', function(data){
//   //   // send message to room if another user connect using emit
//   //   socket.broadcast.to(data.room).emit('user left', { username:data.username, message:'has left to this room'})
//   //   socket.leave(data.room);
//   // })
//   // listen to emit
//   socket.on('message', function(data){
//     User.find({}, (err, users)=>{
//       if (err) {
//         console.log(err)
//       }else{
//         userFriends = [];
//         for (const user of users) {
//           if (user._id == data.userId) {
//             user.friends.forEach(id => {
//               userFriends.push(id)
//             });
//           }
//         }
//         userFriends.forEach((id)=>{
//           User.findById(id, (err, friend)=>{
//             if (err) {
//               console.log(err)
//             }else{
//               friend.notifications.push({
//                 username :data.username,
//                 userImage:data.userImage,
//                 body     :data.username + ' have been add new post'
//               })
//               friend.save((err)=>{
//                 if(err){
//                   console.log(err)
//                 }else{
//                   io.broadcast.emit('new message', { username:data.username, body:data.username + 'have been add new post'})
//                 }
//               });
//             }
//           })
//           // socket.broadcast.to(data.room).emit('new user joined', {username:data.username, message:'has joined to this room'})
//         })
//       }
//     })
//     // socket.broadcast.to(data.userId).emit('new user joined', {username:data.username, message:'has joined to this room'})

// })// end connction
// })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
 next();
})
